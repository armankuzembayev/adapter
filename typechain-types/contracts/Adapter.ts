/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface AdapterInterface extends utils.Interface {
  functions: {
    "FACTORY()": FunctionFragment;
    "ROUTER()": FunctionFragment;
    "WETH()": FunctionFragment;
    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "addLiquidityETH(address,uint256,uint256,uint256,address)": FunctionFragment;
    "createPair(address,address)": FunctionFragment;
    "getAmountsOut(uint256,address[])": FunctionFragment;
    "getPair(address,address)": FunctionFragment;
    "getPairBalance(address,address)": FunctionFragment;
    "removeLiquidity(address,address,uint256,uint256,uint256,address)": FunctionFragment;
    "removeLiquidityETH(address,uint256,uint256,uint256,address)": FunctionFragment;
    "swap(uint256,uint256,address[],address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FACTORY"
      | "ROUTER"
      | "WETH"
      | "addLiquidity"
      | "addLiquidityETH"
      | "createPair"
      | "getAmountsOut"
      | "getPair"
      | "getPairBalance"
      | "removeLiquidity"
      | "removeLiquidityETH"
      | "swap"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "FACTORY", values?: undefined): string;
  encodeFunctionData(functionFragment: "ROUTER", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETH",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETH",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [BigNumberish, BigNumberish, string[], string]
  ): string;

  decodeFunctionResult(functionFragment: "FACTORY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ROUTER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPairBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {
    "AddLiquidity(uint256,uint256,uint256)": EventFragment;
    "Pair(address)": EventFragment;
    "RemoveLiquidity(uint256,uint256)": EventFragment;
    "Swap(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pair"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export interface AddLiquidityEventObject {
  amountA: BigNumber;
  amountB: BigNumber;
  liquidity: BigNumber;
}
export type AddLiquidityEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  AddLiquidityEventObject
>;

export type AddLiquidityEventFilter = TypedEventFilter<AddLiquidityEvent>;

export interface PairEventObject {
  pair: string;
}
export type PairEvent = TypedEvent<[string], PairEventObject>;

export type PairEventFilter = TypedEventFilter<PairEvent>;

export interface RemoveLiquidityEventObject {
  amountA: BigNumber;
  amountB: BigNumber;
}
export type RemoveLiquidityEvent = TypedEvent<
  [BigNumber, BigNumber],
  RemoveLiquidityEventObject
>;

export type RemoveLiquidityEventFilter = TypedEventFilter<RemoveLiquidityEvent>;

export interface SwapEventObject {
  amountOut: BigNumber;
}
export type SwapEvent = TypedEvent<[BigNumber], SwapEventObject>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface Adapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FACTORY(overrides?: CallOverrides): Promise<[string]>;

    ROUTER(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityETH(
      _token: string,
      _amountToken: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPair(
      _tokenA: string,
      _tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAmountsOut(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPair(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPairBalance(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeLiquidity(
      _tokenA: string,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityETH(
      _token: string,
      _liquidity: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FACTORY(overrides?: CallOverrides): Promise<string>;

  ROUTER(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    _tokenA: string,
    _tokenB: string,
    _amountA: BigNumberish,
    _amountB: BigNumberish,
    _amountAMin: BigNumberish,
    _amountBMin: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityETH(
    _token: string,
    _amountToken: BigNumberish,
    _amountTokenMin: BigNumberish,
    _amountETHMin: BigNumberish,
    _to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPair(
    _tokenA: string,
    _tokenB: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAmountsOut(
    _amountIn: BigNumberish,
    _path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPair(
    _tokenA: string,
    _tokenB: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPairBalance(
    _tokenA: string,
    _tokenB: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeLiquidity(
    _tokenA: string,
    _tokenB: string,
    _liquidity: BigNumberish,
    _amountAMin: BigNumberish,
    _amountBMin: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityETH(
    _token: string,
    _liquidity: BigNumberish,
    _amountTokenMin: BigNumberish,
    _amountETHMin: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    _amountIn: BigNumberish,
    _amountOutMin: BigNumberish,
    _path: string[],
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FACTORY(overrides?: CallOverrides): Promise<string>;

    ROUTER(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidityETH(
      _token: string,
      _amountToken: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createPair(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmountsOut(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPair(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPairBalance(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _tokenA: string,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityETH(
      _token: string,
      _liquidity: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddLiquidity(uint256,uint256,uint256)"(
      amountA?: null,
      amountB?: null,
      liquidity?: null
    ): AddLiquidityEventFilter;
    AddLiquidity(
      amountA?: null,
      amountB?: null,
      liquidity?: null
    ): AddLiquidityEventFilter;

    "Pair(address)"(pair?: string | null): PairEventFilter;
    Pair(pair?: string | null): PairEventFilter;

    "RemoveLiquidity(uint256,uint256)"(
      amountA?: null,
      amountB?: null
    ): RemoveLiquidityEventFilter;
    RemoveLiquidity(amountA?: null, amountB?: null): RemoveLiquidityEventFilter;

    "Swap(uint256)"(amountOut?: null): SwapEventFilter;
    Swap(amountOut?: null): SwapEventFilter;
  };

  estimateGas: {
    FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    ROUTER(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityETH(
      _token: string,
      _amountToken: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPair(
      _tokenA: string,
      _tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAmountsOut(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPair(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairBalance(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _tokenA: string,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityETH(
      _token: string,
      _liquidity: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROUTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityETH(
      _token: string,
      _amountToken: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPair(
      _tokenA: string,
      _tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPair(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairBalance(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      _tokenA: string,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityETH(
      _token: string,
      _liquidity: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
